objects()
ls
ls()
x <- c(1, 4.5, 7, 8.4, 2)
x
x[1]
x[4]
assign('x',c(1,2,3,4,5,3))
x
c(1,4,5,7,4,3) -> x
x
1/x
c(x,0,x) -> y
y
v <- 2*x + y + 1
c(1,2,3,4,5)
c(1,2,3,4,5) -> x
c(x,0,x) -> y
v <- 2*x + y + 1
2*x
2 * x
x*x
x+x
2*x + yx
2*x + y
v
mean(v)
c(max(v),min(v))
sum((x-mean(x))^2/(length(x)-1))
var(x)
sort(x)
sqrt(-17)
sqrt(-17+0i)
seq(-5,5)
seq(-5,5,by = -2)
seq(-5,5,by = 2)
s3 <- seq(-5,5,by = .2)
s3
s3[1]
s3[15]
s4 <- seq(length=50, from =-.6,by=7)
s4
s5 <- rep(x, times = 6)
s5
s6 <- rep(x, each = 2)
s6
s6 <- rep(x, each = 5)
s6
temp <- x>13
temp
c(1:3,NA) -> z
z
o <- c(1:6:1)
o <- c(1:6)
o <- c(1:1:6)
o
o <- c(1:0.2:6)
o
o <- c(1:2:6)
o <- seq(1,6,by = 2)
o
z <- c(1:3,NA); ind <- is.na(z)
ind
z(ind)
z[ind]
x == NA
0/0
Inf
Inf-Inf
labs <- paste(c('X','Y'),1:10, sep = "")
labs
labs <- paste(c('X','Y'),1:10, sep = string)
y <- x[!is.na(x)]
y
(x+1)[(!is.na(x)) & x > 0]
x+
1
(x+1)[(is.na(x))]
(x+1)[(is.na(x))][1]
(x+1)[is.na(x)]
(x+1)[!is.na(x)]
(x+1)[!is.na(x) & x<4]
(x+1)[!is.na(x) & x<4] -> z
x[1:10]
x <- rep(x,times = 4)
x[1:10]
c('x','y')[rep(c(1,2,2,1),times =4)]
y <- x[-(1:6)]
y
fruit <- c(5,10,1,20)
fruit
names(fruit) <- c('orange','banana','apple','peach')
fruit
fruit['orange']
lunch <- fruit[c]
lunch <- fruit[c('apple')]
lunch
lunch <- fruit[c('apple','orange')]
lunch
lunch['apple'] <- c(1:3)
x[is.na(x)] <- 0
x
x[-1] <- NA
x
x[is.na(x)] <- 0
x
y <- abs(y)
y
mode(y)
length(y)
attributes(y)
z <- 0:9
z
digits <- as.character(z)
digits
d <- as.integer(digits)
d
d == z
e <- numeric()
e
e[3] < - 17
e[3] <- 17
e
alpha <- alpha[2* 1:5]
alpha <- numeric(10)
alpha
length(alpha) <- 3
alpha
attr(z,'dim') <- c(10,10)
z <- numeric(10)
attr(z,'dim') <- c(10,10)
z
rm(z)
attr(z,'dim') <- c(10,10)
z = object()
z = object
z = numeric()
attr(z,'dim') <- c(10,10)
help(attr)
attr(z,'dim')
attr(z,'dim') <- 2
attributes(z)
z <- 1:45
attributes(z)
length(z)
winter
data.frame(winter)
winter <- c(1,10)
data.frame(winter)
winter
winter <- seq(1,10,by=0.1)
data.frame(winter)
d <-
data.frame(winter)
d
attributes(d)
unclass(d)
d
unclass(d)
state <- c('c("tas", "sa", "qld", "nsw", "nsw", "nt", "wa", "wa",
"qld", "vic", "nsw", "vic", "qld", "qld", "sa", "tas",
"sa", "nt", "wa", "vic", "qld", "nsw", "nsw", "wa",
"sa", "act", "nsw", "vic", "vic", "act"')
state
state <- c("tas", "sa", "qld", "nsw", "nsw", "nt", "wa", "wa","qld", "vic", "nsw", "vic", "qld", "qld", "sa", "tas","sa", "nt", "wa", "vic", "qld", "nsw", "nsw", "wa","sa", "act", "nsw", "vic", "vic","act")
state
c(tas)
print(state)
statef <- factor(state)
statef
print statef
print(statef)
levels(statef)
incomes <- c(60, 43,57,43,23,75,34,66,3,88,55,36,78,56,43,22)
incomes <- c(60, 43,57,43,23,75,34,66,3,88,55,36,78,56,43,22,33,22,55,44,33)
incomes
length(incomes)
length(state)
incomes <- c(60, 43,57,43,23,75,34,66,3,88,55,36,78,56,43,22,33,22,55,44,33,54,34,67,990,86)
length(incomes)
incomes <- c(60, 43,57,43,23,75,34,66,3,88,55,36,78,56,43,22,33,22,55,44,33,54,34,67,990,86,44,33,23,43)
length(incomes)
incmeans <- tapply(incomes, statef,mean)
incmeans
stdErr <- function(x) sqrt(var(x)/length(x))
incmeans <- tapply(incomes, statef,stdErr)
incmeans <- tapply(incomes, statef,mean)
incEr <- tapply(incomes, statef,stdErr)
incEr
help(qt)
qt(incomes)
qt(incomes,state)
qt(incomes,50)
qt(c(0.25,0.75),3)
dim(z) <- c(3,5,100)
z <- 1:1500
length(z)
dim(z) <- c(3,5,100)
z
dim(z)
c(z[1,1,1],z[2,5,10])
c(z[,,])
x <- array(1:20,dim=c(4,5))
x
i <- array(c(1:3,3:1),dim=c(3,2))
i
x[i]
x[i] <- 0
x
Xb <- matrix(0,n,b)
blocks <- rep(c('hi','ho','he'),times = 5)
b <- levels(blocks)
b
blocks
print(b)
b <- factor(blocks)
b
b <- levels(factor(blocks))
n <= 100
n <- 100
varieties <- rep(c('go','to','hell'),times = 4)
v <- levels(factor(varieties))
Xb <- matrix(0,n,b)
Xb <- matrix(0,n,5)
Xb
xc <- array(0,n,b)
N <- table(blocks,varieties)
N <- table(levels(blocks),levels(varieties))
N
Z <- array(1:24,c(4,6))
Z
Z1 <- matrix(1,4,6)
Z1
h = 1:24
h
h <- 1:24
h
Z = h
Z
Z = h;dim(Z) = c(3,4,2)
Z
A <- array(seq(1,34,by=2),dim=c(2,8))
A
B <- array(seq(35,69,by=2),dim=c(2,8))
C <- array(seq(44,80,by=2),dim=c(2,8))
C
C <- 2*A*C +B +1
C
A%o%C
a = 1:20
a = transpose(a)
a = array(1:20,dim=c(5,4))
b = array(1:20,dim=c(4,5))
a %o% b
c = a %o% b
attributes(c)
f <- function(x,y) cos(y)/(1+x^2)
f(a,b)
b = array(21:40,dim=c(5,4))
f(a,b)
d <- outer(0:9,0:9)
d
d <- outer(0:1,0:9)
d
d <- outer(0:9,0:9)
fr <- table(outer(d,d,'-'))
fr
outer(d,d,'-')
fr <- table(outer(d,d,'-'))
fr
plot(fr,xlab='determinant',ylab=frequency)
plot(fr,xlab='determinant',ylab='frequency'')
plot(fr,xlab='determinant',ylab='frequency')
plot(fr,xlab='determinant',ylab='frequency')
A <- array(1:20,c(4,5))
B <- aperm(A,c(5,4))
B <- aperm(A,c(4,5))
B <- aperm(A,c(2,1))
B
B <- aperm(A,c(2,1))
B
A
B <- t(A)
B
B <- matrix(1,4,5)
B
B*A
A
B%*%A
t(B)*A
t(B)%*%A
x = 1:20
A <- array(1:400,c(20,20))
A
x
x <- t(x)
x
A %*% x -> b
attributes(A)
attributes(x)
x <- t(x)
A %*% x -> b
b
solve(A,b)
solve(A)
U[10,10]
A[10,10]
A = A+1
solve(A,b)
A %*% x -> b
solve(A,b)
b
attributes(b)
attributes(x)
attributes(A)
solve(A)
A <- rainbow(20)
A
diag(A)
A
A <- array(1:400,c(20,20))
diag(A)
A <- matrix(1:4)
A
A <- matrix(1:4,5:6)
A <- matrix(1:4,5)
A <- matrix(1:4,columns = 5)
A <- matrix(1:4)
help("matrix")
RNGkind()
RNG()
help("RNG")
RNGversion('hi')
randu
a = randu
a
a = matrix(a)
a
a[1]
a[1,1]
a[1]
a[1,1]
a[1,2]
a[2]
a[3]
a[400]
a[1]
a <- a[1]
attributes(a)
a
a = array(a)
a
nrows
nrows(a)
nrow(a)
ncol(a)
ncol()
ncol(a)
a
a <- matrix(a)
a
a <- matrix(a[1][1])
a
a <- matrix(a[1][1])
a <- matrix(a[1][1])
a <- matrix(a[1][1])
a <- matrix(a[1][1])
a
a[1]
a[1][1]
a[1][1][1]
a[1,4]
a[1,1]
a[1,1,1]
A = matrix(1:9,nrow=3)
A
solve(A)
A[3,3]=1
A
solve(A)
x = c(4,3,2)
A%*%x->b
b
solve(A,b)
solve(A)%*%b
matrix(1:8,ncol=2)
matrix(1:8,dim=c(8,1))
matrix(1:8,dim=1
8
matrix(1:8,dim=c(2,4)
)
matrix(1:9,ncol=9)
matrix(1:9,ncol=3)
matrix(1:9,nrow =3)
matrix(1:9,nrow =3)+2
2*(matrix(1:9,nrow =3)+2)
2*(matrix(1:9,nrow =3)+2)%*%matrix(1:9,nrow =3)
A = 2*(matrix(1:9,nrow =3)+2)%*%matrix(1:9,nrow =3)
A%*%t(A)
eigen(A%*%t(A))
vectors(eigen(A%*%t(A)))
eigen(A%*%t(A))$vectors
c=eigen(A%*%t(A))$vectors
d=eigen(A%*%t(A))$values
d
fr
d
c
A=eigen(A%*%t(A))
A
A = 2*(matrix(1:9,nrow =3)+2)%*%matrix(1:9,nrow =3)
A=A%*%t(A)
d
c
c[,1]
d*c
c[,1]%*%t(c[,1])
d[1]*c[,1]%*%t(c[,1])
d[1]*c[,1]%*%t(c[,1])+d[2]*c[,2]%*%t(c[,2])+d[3]*c[,3]%*%t(c[,3])
A
A[,2:3]=2
A
A[,2:3]=4:9
A
A[A>6]
A>7
for(i in 1:3){}
for(i in 1:3){print(i)}
spectral = array(dims=c(3,3))
spectral = array(dim=c(3,3))
spectral
spectral[1:9] = 0
spectral
for(i in 1:3){spectral = spectral + d[i]*c[,i]%*%t(c[,i])}
spectral
for(i in 1:3){if(spectral[i,1]<0){spectral = spectral + d[i]*c[,i]%*%t(c[,i])}}
spectral
vector6 = 9:7
while(sum(vector6)>=6){vector6 = vector6-1};print(vector6)
ifelse(spectral>170000,1,0)
class(c(1,2,3))
class(1:3)
class(1.1:3)
char1 = "hello!"
class(char1)
char2 = c('red','g',char1)
class(char2)
combined = c('red',1.1,2)
class(combined)
logical1 = c(T,T,F)
class(logical1)
vector1 = vector(mode='logical',3)
vector1
vector1 = vector(mode='numeric',3)
vector1
m2 = matrix(rep(c(T,F,T,T,F,T),times = 5),ncol = 3)
m2
class(m2)
m2[1,]
class(m2[1,])
a1 = array(1:16,dim=c(4,2,2))
a
a[1,1,1]
a[1,1]
a[1,1][2,2]
a[1]
a1 = array(1:16,dim=c(4,2,2))
a1
a1[1,1]
a1[1,1,1]
myvalues1 = 1:5
myvalues2 = c(T,F,T,T,F)
names = c('Trial1','trial2','trial3','trial4','trial5')
df = data.frame(myvalues1,myvalues2,row.names = names)
df
names(df)[1] = 'velocity'
df
list1 = list('thing1',1.5,F)
list1
list1[1]
list1[[1]
]
list1[[1]]
list2 = list(sayhi = c('hi1','hi2'),sayho = 1.5)
list2
list2[sayhi]
list2['sayhi]
list2['sayhi]
list2['sayhi']
list2$sayhi
as.matrix(1:3)
as.numeric(as.matrix(1:3))
getwd()
setqd('/Users/JoshuaLevy/Desktop/Coding)
d
d
d
dfwsrh
erwt
print
q
qw
f
werghwrt
h1
2
1+1
)
setqd('/Users/JoshuaLevy/Desktop/Coding')
setwd('/Users/JoshuaLevy/Desktop/Coding')
getwd()
savehistory("~/Desktop/Coding/Rhistorycommands1.Rhistory")
